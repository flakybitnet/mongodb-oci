stages:
  - build
  - mirror

variables:
  APP_NAME: 'mongodb'
  MONGO_VERSION: '8.0.13'
  MONGO_BINARIES_VERSION: "$MONGO_VERSION-0"
  MONGO_SHELL_VERSION: '2.5.6-0'
  MONGO_TOOLS_VERSION: '100.12.2'
  MONGO_RUST_PING_VERSION: '0.4.0'
  YQ_VERSION: '4.47.1-2'
  WAIT_PORT_VERSION: '1.0.10-0'
  RENDER_TEMPLATE_VERSION: '1.0.9-108'

distributives:
  stage: build
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      when: never
    - when: on_success
  image: public.ecr.aws/docker/library/debian:trixie-slim
  variables:
    GIT_STRATEGY: none
  script:
    - echo 'Updating and installing required system packages and dependencies'
    - apt -qq update
    - apt install -qq -y wget

    - mkdir -p rootfs/opt/bitnami/mongodb/bin

    - echo "Downloading MongoDB ${MONGO_BINARIES_VERSION}"
    - wget -nv "https://gitlab.flakybit.net/api/v4/projects/11/packages/generic/mongodb/${MONGO_VERSION}/mongodb-${MONGO_BINARIES_VERSION}-linux-amd64-debian-12.tar.gz"
    - wget -nv "https://gitlab.flakybit.net/api/v4/projects/11/packages/generic/mongodb/${MONGO_VERSION}/mongodb-${MONGO_BINARIES_VERSION}-linux-amd64-debian-12.tar.gz.sha256"
    - sha256sum -c "mongodb-${MONGO_BINARIES_VERSION}-linux-amd64-debian-12.tar.gz.sha256"
    - tar -zxf "mongodb-${MONGO_BINARIES_VERSION}-linux-amd64-debian-12.tar.gz" --no-same-owner -C rootfs/opt/bitnami/mongodb/bin

    - echo "Downloading MongoDB tools ${MONGO_TOOLS_VERSION}"
    - wget -nv "https://fastdl.mongodb.org/tools/db/mongodb-database-tools-debian12-x86_64-${MONGO_TOOLS_VERSION}.tgz"
    - tar -zxf "mongodb-database-tools-debian12-x86_64-${MONGO_TOOLS_VERSION}.tgz" --no-same-owner -C rootfs/opt/bitnami/mongodb/bin --strip-components=2 "mongodb-database-tools-debian12-x86_64-${MONGO_TOOLS_VERSION}/bin"

    - echo "Downloading MongoDB rust-ping ${MONGO_RUST_PING_VERSION}"
    - wget -nv "https://github.com/syndikat7/mongodb-rust-ping/releases/download/v${MONGO_RUST_PING_VERSION}/mongodb-rust-ping-x86_64-unknown-linux-gnu.tar.gz"
    - tar -zxf "mongodb-rust-ping-x86_64-unknown-linux-gnu.tar.gz" --no-same-owner -C rootfs/opt/bitnami/mongodb/bin

    - echo "Downloading MongoDB shell ${MONGO_SHELL_VERSION}"
    - wget -nv "https://downloads.bitnami.com/files/stacksmith/mongodb-shell-${MONGO_SHELL_VERSION}-linux-amd64-debian-12.tar.gz"
    - wget -nv "https://downloads.bitnami.com/files/stacksmith/mongodb-shell-${MONGO_SHELL_VERSION}-linux-amd64-debian-12.tar.gz.sha256"
    - sha256sum -c "mongodb-shell-${MONGO_SHELL_VERSION}-linux-amd64-debian-12.tar.gz.sha256"
    - tar -zxf "mongodb-shell-${MONGO_SHELL_VERSION}-linux-amd64-debian-12.tar.gz" --no-same-owner -C rootfs/opt/bitnami --strip-components=2  --wildcards '*/files'

    - echo "Downloading yq ${YQ_VERSION}"
    - wget -nv "https://downloads.bitnami.com/files/stacksmith/yq-${YQ_VERSION}-linux-amd64-debian-12.tar.gz"
    - wget -nv "https://downloads.bitnami.com/files/stacksmith/yq-${YQ_VERSION}-linux-amd64-debian-12.tar.gz.sha256"
    - sha256sum -c "yq-${YQ_VERSION}-linux-amd64-debian-12.tar.gz.sha256"
    - tar -zxf "yq-${YQ_VERSION}-linux-amd64-debian-12.tar.gz" --no-same-owner -C rootfs/opt/bitnami --strip-components=2  --wildcards '*/files'

    - echo "Downloading wait-for-port ${WAIT_PORT_VERSION}"
    - wget -nv "https://downloads.bitnami.com/files/stacksmith/wait-for-port-${WAIT_PORT_VERSION}-linux-amd64-debian-12.tar.gz"
    - wget -nv "https://downloads.bitnami.com/files/stacksmith/wait-for-port-${WAIT_PORT_VERSION}-linux-amd64-debian-12.tar.gz.sha256"
    - sha256sum -c "wait-for-port-${WAIT_PORT_VERSION}-linux-amd64-debian-12.tar.gz.sha256"
    - tar -zxf "wait-for-port-${WAIT_PORT_VERSION}-linux-amd64-debian-12.tar.gz" --no-same-owner -C rootfs/opt/bitnami --strip-components=2  --wildcards '*/files'

    - echo "Downloading render-template ${RENDER_TEMPLATE_VERSION}"
    - wget -nv "https://downloads.bitnami.com/files/stacksmith/render-template-${RENDER_TEMPLATE_VERSION}-linux-amd64-debian-12.tar.gz"
    - wget -nv "https://downloads.bitnami.com/files/stacksmith/render-template-${RENDER_TEMPLATE_VERSION}-linux-amd64-debian-12.tar.gz.sha256"
    - sha256sum -c "render-template-${RENDER_TEMPLATE_VERSION}-linux-amd64-debian-12.tar.gz.sha256"
    - tar -zxf "render-template-${RENDER_TEMPLATE_VERSION}-linux-amd64-debian-12.tar.gz" --no-same-owner -C rootfs/opt/bitnami --strip-components=2  --wildcards '*/files'
  artifacts:
    paths:
      - rootfs

images:
  stage: build
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      when: never
    - when: on_success
  needs:
    - distributives
  dependencies:
    - distributives
  image: quay.io/buildah/stable:v1.41.5
  variables:
    STORAGE_DRIVER: 'vfs'
    BUILDAH_FORMAT: docker
  script:
    - echo "$CI_REGISTRY_PASSWORD" | buildah login -u "$CI_REGISTRY_USER" --password-stdin "$CI_REGISTRY"
    - buildah build -t "$CI_REGISTRY_IMAGE/server:$CI_COMMIT_REF_NAME"
        --build-arg MONGO_VERSION="$MONGO_VERSION"
        --build-arg MONGO_BINARIES_VERSION="$MONGO_BINARIES_VERSION"
        --build-arg MONGO_SHELL_VERSION="$MONGO_SHELL_VERSION"
        --build-arg MONGO_TOOLS_VERSION="$MONGO_TOOLS_VERSION"
        --build-arg MONGO_RUST_PING_VERSION="$MONGO_RUST_PING_VERSION"
        --build-arg YQ_VERSION="$YQ_VERSION"
        --build-arg WAIT_PORT_VERSION="$WAIT_PORT_VERSION"
        --build-arg RENDER_TEMPLATE_VERSION="$RENDER_TEMPLATE_VERSION"
    - buildah push "$CI_REGISTRY_IMAGE/server:$CI_COMMIT_REF_NAME"

mirror-git-github:
  stage: mirror
  rules:
    - if: $CI_PIPELINE_SOURCE == 'push'
  dependencies: []
  image: docker.io/alpine/git:v2.49.1
  variables:
    GIT_STRATEGY: clone
  script:
    - git remote add github "https://$GITHUB_USER:$GITHUB_PASSWORD@github.com/flakybitnet/mongodb-oci.git"
    - if [ -n "${CI_COMMIT_BRANCH-}" ]; then
        git checkout -b "$CI_COMMIT_BRANCH";
        git fetch github;
        git push --force-with-lease github "$CI_COMMIT_BRANCH";
        fi
    - if [ -n "${CI_COMMIT_TAG-}" ]; then
        git push github tag $CI_COMMIT_TAG;
        fi

mirror-image-github:
  stage: mirror
  rules:
    - if: $CI_COMMIT_TAG
  dependencies: []
  image: public.ecr.aws/flakybitnet/skopeo:1.20.0-fb1
  variables:
    REGISTRY: ghcr.io
    IMAGE: flakybitnet/mongodb-server
    GIT_STRATEGY: none
  script:
    - echo "$GITHUB_PASSWORD" | skopeo login -u "$GITHUB_USER" --password-stdin "$REGISTRY"
    - skopeo copy "docker://$CI_REGISTRY_IMAGE/server:$CI_COMMIT_REF_NAME" "docker://$REGISTRY/$IMAGE:$CI_COMMIT_REF_NAME"

mirror-image-quay:
  stage: mirror
  rules:
    - if: $CI_COMMIT_TAG
  dependencies: []
  image: public.ecr.aws/flakybitnet/skopeo:1.20.0-fb1
  variables:
    REGISTRY: quay.io
    IMAGE: flakybitnet/mongodb-server
    GIT_STRATEGY: none
  script:
    - echo "$QUAY_PASSWORD" | skopeo login -u "$QUAY_USER" --password-stdin "$REGISTRY"
    - skopeo copy "docker://$CI_REGISTRY_IMAGE/server:$CI_COMMIT_REF_NAME" "docker://$REGISTRY/$IMAGE:$CI_COMMIT_REF_NAME"

mirror-image-amazon:
  stage: mirror
  rules:
    - if: $CI_COMMIT_TAG
  dependencies: []
  image: public.ecr.aws/flakybitnet/skopeo:1.20.0-fb1
  variables:
    REGISTRY: public.ecr.aws
    IMAGE: flakybitnet/mongodb/server
    GIT_STRATEGY: none
    AWS_ACCESS_KEY_ID: $ECR_USER
    AWS_SECRET_ACCESS_KEY: $ECR_PASSWORD
  script:
    - printf '{"credHelpers":{"%s":"%s"}}' "$REGISTRY" 'ecr-login' > "$HOME/auth.json"
    - skopeo copy "docker://$CI_REGISTRY_IMAGE/server:$CI_COMMIT_REF_NAME" "docker://$REGISTRY/$IMAGE:$CI_COMMIT_REF_NAME"
        --dest-authfile="$HOME/auth.json"
